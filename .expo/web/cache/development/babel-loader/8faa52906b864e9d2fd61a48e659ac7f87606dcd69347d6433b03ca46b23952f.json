{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useAnimatedProps = void 0;\nvar _useAnimatedStyle = require(\"./useAnimatedStyle\");\nvar _PlatformChecker = require(\"../PlatformChecker\");\nvar useAnimatedProps;\nif ((0, _PlatformChecker.shouldBeUseWeb)()) {\n  exports.useAnimatedProps = useAnimatedProps = function useAnimatedProps(updater, deps, adapters) {\n    return (0, _useAnimatedStyle.useAnimatedStyle)(updater, deps, adapters, true);\n  };\n} else {\n  exports.useAnimatedProps = useAnimatedProps = _useAnimatedStyle.useAnimatedStyle;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","useAnimatedProps","_useAnimatedStyle","require","_PlatformChecker","shouldBeUseWeb","updater","deps","adapters","useAnimatedStyle"],"sources":["D:\\course\\ReactNative\\Tasks\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\hook\\useAnimatedProps.ts"],"sourcesContent":["'use strict';\nimport { useAnimatedStyle } from './useAnimatedStyle';\nimport type { DependencyList } from './commonTypes';\nimport type {\n  AnimatedPropsAdapterFunction,\n  useAnimatedPropsType,\n} from '../helperTypes';\nimport { shouldBeUseWeb } from '../PlatformChecker';\n\n// TODO: we should make sure that when useAP is used we are not assigning styles\n// when you need styles to animated you should always use useAS\n// TODO TYPESCRIPT This is a temporary cast to get rid of .d.ts file.\n\n/**\n * Lets you create an animated props object which can be animated using shared values.\n *\n * @param updater - A function returning an object with properties you want to animate.\n * @param dependencies - An optional array of dependencies. Only relevant when using Reanimated without the Babel plugin on the Web.\n * @param adapters - An optional function or array of functions allowing to adopt prop naming between JS and the native side.\n * @returns An animated props object which has to be passed to `animatedProps` property of an Animated component that you want to animate.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedProps\n */\nexport let useAnimatedProps: useAnimatedPropsType;\n\nif (shouldBeUseWeb()) {\n  useAnimatedProps = function <T extends object>(\n    updater: () => Partial<T>,\n    deps?: DependencyList | null,\n    adapters?:\n      | AnimatedPropsAdapterFunction\n      | AnimatedPropsAdapterFunction[]\n      | null\n  ) {\n    return (useAnimatedStyle as useAnimatedPropsType)(\n      updater,\n      deps,\n      adapters,\n      true\n    );\n  };\n} else {\n  useAnimatedProps = useAnimatedStyle as useAnimatedPropsType;\n}\n"],"mappings":"AAAA,YAAY;;AAAAA,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,gBAAA;AACZ,IAAAC,iBAAA,GAAAC,OAAA;AAMA,IAAAC,gBAAA,GAAAD,OAAA;AAeO,IAAIF,gBAAsC;AAEjD,IAAI,IAAAI,+BAAc,GAAE,EAAE;EACpBN,OAAA,CAAAE,gBAAA,GAAAA,gBAAgB,GAAG,SAAAA,iBACjBK,OAAyB,EACzBC,IAA4B,EAC5BC,QAGQ,EACR;IACA,OAAQ,IAAAC,kCAAgB,EACtBH,OAAO,EACPC,IAAI,EACJC,QAAQ,EACR,IAAI,CACL;EACH,CAAC;AACH,CAAC,MAAM;EACLT,OAAA,CAAAE,gBAAA,GAAAA,gBAAgB,GAAGQ,kCAAwC;AAC7D"},"metadata":{},"sourceType":"script","externalDependencies":[]}