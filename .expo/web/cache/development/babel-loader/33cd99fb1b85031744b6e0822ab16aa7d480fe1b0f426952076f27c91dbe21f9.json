{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useHandler = useHandler;\nvar _react = require(\"react\");\nvar _core = require(\"../core\");\nvar _PlatformChecker = require(\"../PlatformChecker\");\nvar _utils = require(\"./utils\");\nfunction useHandler(handlers, dependencies) {\n  var initRef = (0, _react.useRef)(null);\n  if (initRef.current === null) {\n    initRef.current = {\n      context: (0, _core.makeRemote)({}),\n      savedDependencies: []\n    };\n  }\n  (0, _react.useEffect)(function () {\n    return function () {\n      initRef.current = null;\n    };\n  }, []);\n  var _initRef$current = initRef.current,\n    context = _initRef$current.context,\n    savedDependencies = _initRef$current.savedDependencies;\n  dependencies = (0, _utils.buildDependencies)(dependencies, handlers);\n  var doDependenciesDiffer = !(0, _utils.areDependenciesEqual)(dependencies, savedDependencies);\n  initRef.current.savedDependencies = dependencies;\n  var useWeb = (0, _PlatformChecker.isWeb)() || (0, _PlatformChecker.isJest)();\n  return {\n    context: context,\n    doDependenciesDiffer: doDependenciesDiffer,\n    useWeb: useWeb\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","useHandler","_react","require","_core","_PlatformChecker","_utils","handlers","dependencies","initRef","useRef","current","context","makeRemote","savedDependencies","useEffect","_initRef$current","buildDependencies","doDependenciesDiffer","areDependenciesEqual","useWeb","isWeb","isJest"],"sources":["D:\\course\\ReactNative\\Tasks\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\hook\\useHandler.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport type { WorkletFunction } from '../commonTypes';\nimport { makeRemote } from '../core';\nimport { isWeb, isJest } from '../PlatformChecker';\nimport type { DependencyList, ReanimatedEvent } from './commonTypes';\nimport { areDependenciesEqual, buildDependencies } from './utils';\n\ninterface GeneralHandler<\n  Event extends object,\n  Context extends Record<string, unknown>\n> {\n  (event: ReanimatedEvent<Event>, context: Context): void;\n}\n\ntype GeneralWorkletHandler<\n  Event extends object,\n  Context extends Record<string, unknown>\n> = WorkletFunction<[event: ReanimatedEvent<Event>, context: Context]>;\n\ntype GeneralHandlers<\n  Event extends object,\n  Context extends Record<string, unknown>\n> = Record<string, GeneralHandler<Event, Context> | undefined>;\n\ntype GeneralWorkletHandlers<\n  Event extends object,\n  Context extends Record<string, unknown>\n> = Record<string, GeneralWorkletHandler<Event, Context> | undefined>;\n\ninterface ContextWithDependencies<Context extends Record<string, unknown>> {\n  context: Context;\n  savedDependencies: DependencyList;\n}\n\nexport interface UseHandlerContext<Context extends Record<string, unknown>> {\n  context: Context;\n  doDependenciesDiffer: boolean;\n  useWeb: boolean;\n}\n\n/**\n * Lets you find out whether the event handler dependencies have changed.\n *\n * @param handlers - An object of event handlers.\n * @param dependencies - An optional array of dependencies.\n * @returns An object containing a boolean indicating whether the dependencies have changed, and a boolean indicating whether the code is running on the web.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useHandler\n */\n// @ts-expect-error This overload is required by our API.\nexport function useHandler<\n  Event extends object,\n  Context extends Record<string, unknown>\n>(\n  handlers: GeneralHandlers<Event, Context>,\n  dependencies?: DependencyList\n): UseHandlerContext<Context>;\n\nexport function useHandler<\n  Event extends object,\n  Context extends Record<string, unknown>\n>(\n  handlers: GeneralWorkletHandlers<Event, Context>,\n  dependencies?: DependencyList\n): UseHandlerContext<Context> {\n  const initRef = useRef<ContextWithDependencies<Context> | null>(null);\n  if (initRef.current === null) {\n    initRef.current = {\n      context: makeRemote<Context>({} as Context),\n      savedDependencies: [],\n    };\n  }\n\n  useEffect(() => {\n    return () => {\n      initRef.current = null;\n    };\n  }, []);\n\n  const { context, savedDependencies } = initRef.current;\n\n  dependencies = buildDependencies(\n    dependencies,\n    handlers as Record<string, WorkletFunction | undefined>\n  );\n\n  const doDependenciesDiffer = !areDependenciesEqual(\n    dependencies,\n    savedDependencies\n  );\n  initRef.current.savedDependencies = dependencies;\n  const useWeb = isWeb() || isJest();\n\n  return { context, doDependenciesDiffer, useWeb };\n}\n"],"mappings":"AAAA,YAAY;;AAAAA,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,UAAA,GAAAA,UAAA;AACZ,IAAAC,MAAA,GAAAC,OAAA;AAEA,IAAAC,KAAA,GAAAD,OAAA;AACA,IAAAE,gBAAA,GAAAF,OAAA;AAEA,IAAAG,MAAA,GAAAH,OAAA;AAoDO,SAASF,UAAUA,CAIxBM,QAAgD,EAChDC,YAA6B,EACD;EAC5B,IAAMC,OAAO,GAAG,IAAAC,aAAM,EAA0C,IAAI,CAAC;EACrE,IAAID,OAAO,CAACE,OAAO,KAAK,IAAI,EAAE;IAC5BF,OAAO,CAACE,OAAO,GAAG;MAChBC,OAAO,EAAE,IAAAC,gBAAU,EAAU,CAAC,CAAC,CAAY;MAC3CC,iBAAiB,EAAE;IACrB,CAAC;EACH;EAEA,IAAAC,gBAAS,EAAC,YAAM;IACd,OAAO,YAAM;MACXN,OAAO,CAACE,OAAO,GAAG,IAAI;IACxB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,IAAAK,gBAAA,GAAuCP,OAAO,CAACE,OAAO;IAA9CC,OAAO,GAAAI,gBAAA,CAAPJ,OAAO;IAAEE,iBAAA,GAAAE,gBAAA,CAAAF,iBAAA;EAEjBN,YAAY,GAAG,IAAAS,wBAAiB,EAC9BT,YAAY,EACZD,QAAQ,CACT;EAED,IAAMW,oBAAoB,GAAG,CAAC,IAAAC,2BAAoB,EAChDX,YAAY,EACZM,iBAAiB,CAClB;EACDL,OAAO,CAACE,OAAO,CAACG,iBAAiB,GAAGN,YAAY;EAChD,IAAMY,MAAM,GAAG,IAAAC,sBAAK,GAAE,IAAI,IAAAC,uBAAM,GAAE;EAElC,OAAO;IAAEV,OAAO,EAAPA,OAAO;IAAEM,oBAAoB,EAApBA,oBAAoB;IAAEE,MAAA,EAAAA;EAAO,CAAC;AAClD"},"metadata":{},"sourceType":"script","externalDependencies":[]}