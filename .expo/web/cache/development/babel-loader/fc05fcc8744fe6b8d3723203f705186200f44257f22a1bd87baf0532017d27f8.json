{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _useLatestCallback = _interopRequireDefault(require(\"use-latest-callback\"));\nvar _helpers = require(\"./helpers\");\nvar _theming = require(\"../../core/theming\");\nvar _colors = require(\"../../styles/themes/v2/colors\");\nvar _hasTouchHandler = _interopRequireDefault(require(\"../../utils/hasTouchHandler\"));\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\nvar _MaterialCommunityIcon = _interopRequireDefault(require(\"../MaterialCommunityIcon\"));\nvar _Surface = _interopRequireDefault(require(\"../Surface\"));\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\nvar _excluded = [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"background\", \"accessibilityLabel\", \"closeIconAccessibilityLabel\", \"onPress\", \"onLongPress\", \"onPressOut\", \"onPressIn\", \"delayLongPress\", \"onClose\", \"closeIcon\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\", \"rippleColor\", \"showSelectedOverlay\", \"showSelectedCheck\", \"ellipsizeMode\", \"compact\", \"elevated\", \"maxFontSizeMultiplier\"];\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar Chip = function Chip(_ref) {\n  var _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'flat' : _ref$mode,\n    children = _ref.children,\n    icon = _ref.icon,\n    avatar = _ref.avatar,\n    _ref$selected = _ref.selected,\n    selected = _ref$selected === void 0 ? false : _ref$selected,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    background = _ref.background,\n    accessibilityLabel = _ref.accessibilityLabel,\n    _ref$closeIconAccessi = _ref.closeIconAccessibilityLabel,\n    closeIconAccessibilityLabel = _ref$closeIconAccessi === void 0 ? 'Close' : _ref$closeIconAccessi,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    onPressOut = _ref.onPressOut,\n    onPressIn = _ref.onPressIn,\n    delayLongPress = _ref.delayLongPress,\n    onClose = _ref.onClose,\n    closeIcon = _ref.closeIcon,\n    textStyle = _ref.textStyle,\n    style = _ref.style,\n    themeOverrides = _ref.theme,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'chip' : _ref$testID,\n    selectedColor = _ref.selectedColor,\n    customRippleColor = _ref.rippleColor,\n    _ref$showSelectedOver = _ref.showSelectedOverlay,\n    showSelectedOverlay = _ref$showSelectedOver === void 0 ? false : _ref$showSelectedOver,\n    _ref$showSelectedChec = _ref.showSelectedCheck,\n    showSelectedCheck = _ref$showSelectedChec === void 0 ? true : _ref$showSelectedChec,\n    ellipsizeMode = _ref.ellipsizeMode,\n    compact = _ref.compact,\n    _ref$elevated = _ref.elevated,\n    elevated = _ref$elevated === void 0 ? false : _ref$elevated,\n    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var theme = (0, _theming.useInternalTheme)(themeOverrides);\n  var isV3 = theme.isV3,\n    roundness = theme.roundness;\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(isV3 && elevated ? 1 : 0)),\n    elevation = _React$useRef.current;\n  var hasPassedTouchHandler = (0, _hasTouchHandler.default)({\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: onPressIn,\n    onPressOut: onPressOut\n  });\n  var isOutlined = mode === 'outlined';\n  var handlePressIn = (0, _useLatestCallback.default)(function (e) {\n    var scale = theme.animation.scale;\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n    _reactNative.Animated.timing(elevation, {\n      toValue: isV3 ? elevated ? 2 : 0 : 4,\n      duration: 200 * scale,\n      useNativeDriver: _reactNative.Platform.OS === 'web' || _reactNative.Platform.constants.reactNativeVersion.minor <= 72\n    }).start();\n  });\n  var handlePressOut = (0, _useLatestCallback.default)(function (e) {\n    var scale = theme.animation.scale;\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);\n    _reactNative.Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: _reactNative.Platform.OS === 'web' || _reactNative.Platform.constants.reactNativeVersion.minor <= 72\n    }).start();\n  });\n  var opacity = isV3 ? 0.38 : 0.26;\n  var defaultBorderRadius = roundness * (isV3 ? 2 : 4);\n  var iconSize = isV3 ? 18 : 16;\n  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},\n    customBackgroundColor = _ref2.backgroundColor,\n    _ref2$borderRadius = _ref2.borderRadius,\n    borderRadius = _ref2$borderRadius === void 0 ? defaultBorderRadius : _ref2$borderRadius;\n  var _getChipColors = (0, _helpers.getChipColors)({\n      isOutlined: isOutlined,\n      theme: theme,\n      selectedColor: selectedColor,\n      showSelectedOverlay: showSelectedOverlay,\n      customBackgroundColor: customBackgroundColor,\n      disabled: disabled,\n      customRippleColor: customRippleColor\n    }),\n    borderColor = _getChipColors.borderColor,\n    textColor = _getChipColors.textColor,\n    iconColor = _getChipColors.iconColor,\n    rippleColor = _getChipColors.rippleColor,\n    selectedBackgroundColor = _getChipColors.selectedBackgroundColor,\n    backgroundColor = _getChipColors.backgroundColor;\n  var accessibilityState = {\n    selected: selected,\n    disabled: disabled\n  };\n  var elevationStyle = isV3 || _reactNative.Platform.OS === 'android' ? elevation : 0;\n  var multiplier = isV3 ? compact ? 1.5 : 2 : 1;\n  var labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft: avatar || icon || selected && showSelectedCheck ? 4 * multiplier : 8 * multiplier\n  };\n  var contentSpacings = {\n    paddingRight: isV3 ? onClose ? 34 : 0 : onClose ? 32 : 4\n  };\n  var labelTextStyle = Object.assign({\n    color: textColor\n  }, isV3 ? theme.fonts.labelLarge : theme.fonts.regular);\n  return React.createElement(_Surface.default, _extends({\n    style: [styles.container, isV3 && (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer), !theme.isV3 && {\n      elevation: elevationStyle\n    }, {\n      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n      borderColor: borderColor,\n      borderRadius: borderRadius\n    }, style]\n  }, theme.isV3 && {\n    elevation: elevationStyle\n  }, rest, {\n    testID: `${testID}-container`,\n    theme: theme\n  }), React.createElement(_TouchableRipple.default, {\n    borderless: true,\n    background: background,\n    style: [{\n      borderRadius: borderRadius\n    }, styles.touchable],\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: hasPassedTouchHandler ? handlePressIn : undefined,\n    onPressOut: hasPassedTouchHandler ? handlePressOut : undefined,\n    delayLongPress: delayLongPress,\n    rippleColor: rippleColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    accessibilityState: accessibilityState,\n    testID: testID,\n    theme: theme\n  }, React.createElement(_reactNative.View, {\n    style: [styles.content, isV3 && styles.md3Content, contentSpacings]\n  }, avatar && !icon ? React.createElement(_reactNative.View, {\n    style: [styles.avatarWrapper, isV3 && styles.md3AvatarWrapper, disabled && {\n      opacity: opacity\n    }]\n  }, React.isValidElement(avatar) ? React.cloneElement(avatar, {\n    style: [styles.avatar, avatar.props.style]\n  }) : avatar) : null, icon || selected && showSelectedCheck ? React.createElement(_reactNative.View, {\n    style: [styles.icon, isV3 && styles.md3Icon, avatar ? [styles.avatar, styles.avatarSelected, isV3 && selected && styles.md3SelectedIcon] : null]\n  }, icon ? React.createElement(_Icon.default, {\n    source: icon,\n    color: avatar ? _colors.white : !disabled && theme.isV3 ? theme.colors.primary : iconColor,\n    size: 18,\n    theme: theme\n  }) : React.createElement(_MaterialCommunityIcon.default, {\n    name: \"check\",\n    color: avatar ? _colors.white : iconColor,\n    size: 18,\n    direction: \"ltr\"\n  })) : null, React.createElement(_Text.default, {\n    variant: \"labelLarge\",\n    selectable: false,\n    numberOfLines: 1,\n    style: [isV3 ? styles.md3LabelText : styles.labelText, labelTextStyle, labelSpacings, textStyle],\n    ellipsizeMode: ellipsizeMode,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, children))), onClose ? React.createElement(_reactNative.View, {\n    style: styles.closeButtonStyle\n  }, React.createElement(_reactNative.Pressable, {\n    onPress: onClose,\n    disabled: disabled,\n    accessibilityRole: \"button\",\n    accessibilityLabel: closeIconAccessibilityLabel\n  }, React.createElement(_reactNative.View, {\n    style: [styles.icon, styles.closeIcon, isV3 && styles.md3CloseIcon]\n  }, closeIcon ? React.createElement(_Icon.default, {\n    source: closeIcon,\n    color: iconColor,\n    size: iconSize\n  }) : React.createElement(_MaterialCommunityIcon.default, {\n    name: isV3 ? 'close' : 'close-circle',\n    size: iconSize,\n    color: iconColor,\n    direction: \"ltr\"\n  })))) : null);\n};\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderWidth: _reactNative.StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: _reactNative.Platform.select({\n      default: 'column',\n      web: 'row'\n    })\n  },\n  md3OutlineContainer: {\n    borderWidth: 1\n  },\n  md3FlatContainer: {\n    borderWidth: 0\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative'\n  },\n  md3Content: {\n    paddingLeft: 0\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center'\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0\n  },\n  closeIcon: {\n    marginRight: 4\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  touchable: {\n    width: '100%'\n  }\n});\nvar _default = exports.default = Chip;","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_useLatestCallback","_interopRequireDefault","_helpers","_theming","_colors","_hasTouchHandler","_Icon","_MaterialCommunityIcon","_Surface","_TouchableRipple","_Text","_excluded","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","Chip","_ref","_ref$mode","mode","children","icon","avatar","_ref$selected","selected","_ref$disabled","disabled","background","accessibilityLabel","_ref$closeIconAccessi","closeIconAccessibilityLabel","onPress","onLongPress","onPressOut","onPressIn","delayLongPress","onClose","closeIcon","textStyle","style","themeOverrides","theme","_ref$testID","testID","selectedColor","customRippleColor","rippleColor","_ref$showSelectedOver","showSelectedOverlay","_ref$showSelectedChec","showSelectedCheck","ellipsizeMode","compact","_ref$elevated","elevated","maxFontSizeMultiplier","rest","_objectWithoutProperties2","useInternalTheme","isV3","roundness","_React$useRef","useRef","Animated","Value","elevation","current","hasPassedTouchHandler","hasTouchHandler","isOutlined","handlePressIn","useLatestCallback","scale","animation","timing","toValue","duration","useNativeDriver","Platform","OS","constants","reactNativeVersion","minor","start","handlePressOut","opacity","defaultBorderRadius","iconSize","_ref2","StyleSheet","flatten","customBackgroundColor","backgroundColor","_ref2$borderRadius","borderRadius","_getChipColors","getChipColors","borderColor","textColor","iconColor","selectedBackgroundColor","accessibilityState","elevationStyle","multiplier","labelSpacings","marginRight","marginLeft","contentSpacings","paddingRight","labelTextStyle","assign","color","fonts","labelLarge","regular","createElement","Surface","_extends","styles","container","md3OutlineContainer","md3FlatContainer","TouchableRipple","borderless","touchable","undefined","accessibilityRole","View","content","md3Content","avatarWrapper","md3AvatarWrapper","isValidElement","cloneElement","props","md3Icon","avatarSelected","md3SelectedIcon","Icon","source","white","colors","primary","size","MaterialCommunityIcon","name","direction","Text","variant","selectable","numberOfLines","md3LabelText","labelText","closeButtonStyle","Pressable","md3CloseIcon","create","borderWidth","hairlineWidth","borderStyle","flexDirection","select","web","alignItems","paddingLeft","position","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent","_default","exports"],"sources":["D:\\course\\ReactNative\\Tasks\\node_modules\\react-native-paper\\src\\components\\Chip\\Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  ColorValue,\n  GestureResponderEvent,\n  Platform,\n  PressableAndroidRippleConfig,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  Pressable,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport useLatestCallback from 'use-latest-callback';\n\nimport { getChipColors } from './helpers';\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { $Omit, EllipsizeProp, ThemeProp } from '../../types';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\nexport type Props = $Omit<React.ComponentProps<typeof Surface>, 'mode'> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   * Note: With theme version 3 `selectedColor` doesn't apply to the `icon`.\n   *       If you want specify custom color for the `icon`, render your own `Icon` component.\n   */\n  selectedColor?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether to display overlay on selected chip\n   */\n  showSelectedOverlay?: boolean;\n  /**\n   * Whether to display default check icon on selected chip.\n   * Note: Check will not be shown if `icon` is specified. If specified, `icon` will be shown regardless of `selected`.\n   */\n  showSelectedCheck?: boolean;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/pressable#rippleconfig\n   */\n  background?: PressableAndroidRippleConfig;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute as soon as the touchable element is pressed and invoked even before onPress.\n   */\n  onPressIn?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute as soon as the touch is released even before onPress.\n   */\n  onPressOut?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * The number of milliseconds a user must touch the element before executing `onLongPress`.\n   */\n  delayLongPress?: number;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Sets smaller horizontal paddings `12dp` around label, when there is only label.\n   */\n  compact?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether chip should have the elevation.\n   */\n  elevated?: boolean;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n  /**\n   * Specifies the largest possible scale a text font can reach.\n   */\n  maxFontSizeMultiplier?: number;\n};\n\n/**\n * Chips are compact elements that can represent inputs, attributes, or actions.\n * They can have an icon or avatar on the left, and a close button icon on the right.\n * They are typically used to:\n * <ul>\n *  <li>Present multiple options </li>\n *  <li>Represent attributes active or chosen </li>\n *  <li>Present filter options </li>\n *  <li>Trigger actions related to primary content </li>\n * </ul>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  background,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onPressOut,\n  onPressIn,\n  delayLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme: themeOverrides,\n  testID = 'chip',\n  selectedColor,\n  rippleColor: customRippleColor,\n  showSelectedOverlay = false,\n  showSelectedCheck = true,\n  ellipsizeMode,\n  compact,\n  elevated = false,\n  maxFontSizeMultiplier,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { isV3, roundness } = theme;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isV3 && elevated ? 1 : 0)\n  );\n\n  const hasPassedTouchHandler = hasTouchHandler({\n    onPress,\n    onLongPress,\n    onPressIn,\n    onPressOut,\n  });\n\n  const isOutlined = mode === 'outlined';\n\n  const handlePressIn = useLatestCallback((e: GestureResponderEvent) => {\n    const { scale } = theme.animation;\n    onPressIn?.(e);\n    Animated.timing(elevation, {\n      toValue: isV3 ? (elevated ? 2 : 0) : 4,\n      duration: 200 * scale,\n      useNativeDriver:\n        Platform.OS === 'web' ||\n        Platform.constants.reactNativeVersion.minor <= 72,\n    }).start();\n  });\n\n  const handlePressOut = useLatestCallback((e: GestureResponderEvent) => {\n    const { scale } = theme.animation;\n    onPressOut?.(e);\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver:\n        Platform.OS === 'web' ||\n        Platform.constants.reactNativeVersion.minor <= 72,\n    }).start();\n  });\n\n  const opacity = isV3 ? 0.38 : 0.26;\n  const defaultBorderRadius = roundness * (isV3 ? 2 : 4);\n  const iconSize = isV3 ? 18 : 16;\n\n  const {\n    backgroundColor: customBackgroundColor,\n    borderRadius = defaultBorderRadius,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const {\n    borderColor,\n    textColor,\n    iconColor,\n    rippleColor,\n    selectedBackgroundColor,\n    backgroundColor,\n  } = getChipColors({\n    isOutlined,\n    theme,\n    selectedColor,\n    showSelectedOverlay,\n    customBackgroundColor,\n    disabled,\n    customRippleColor,\n  });\n\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  const elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  const multiplier = isV3 ? (compact ? 1.5 : 2) : 1;\n  const labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft:\n      avatar || icon || (selected && showSelectedCheck)\n        ? 4 * multiplier\n        : 8 * multiplier,\n  };\n  const contentSpacings = {\n    paddingRight: isV3 ? (onClose ? 34 : 0) : onClose ? 32 : 4,\n  };\n  const labelTextStyle = {\n    color: textColor,\n    ...(isV3 ? theme.fonts.labelLarge : theme.fonts.regular),\n  };\n  return (\n    <Surface\n      style={[\n        styles.container,\n        isV3 &&\n          (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer),\n        !theme.isV3 && {\n          elevation: elevationStyle,\n        },\n        {\n          backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n          borderColor,\n          borderRadius,\n        },\n        style,\n      ]}\n      {...(theme.isV3 && { elevation: elevationStyle })}\n      {...rest}\n      testID={`${testID}-container`}\n      theme={theme}\n    >\n      <TouchableRipple\n        borderless\n        background={background}\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={hasPassedTouchHandler ? handlePressIn : undefined}\n        onPressOut={hasPassedTouchHandler ? handlePressOut : undefined}\n        delayLongPress={delayLongPress}\n        rippleColor={rippleColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n        theme={theme}\n      >\n        <View\n          style={[styles.content, isV3 && styles.md3Content, contentSpacings]}\n        >\n          {avatar && !icon ? (\n            <View\n              style={[\n                styles.avatarWrapper,\n                isV3 && styles.md3AvatarWrapper,\n                disabled && { opacity },\n              ]}\n            >\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar as React.ReactElement<any>, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || (selected && showSelectedCheck) ? (\n            <View\n              style={[\n                styles.icon,\n                isV3 && styles.md3Icon,\n                avatar\n                  ? [\n                      styles.avatar,\n                      styles.avatarSelected,\n                      isV3 && selected && styles.md3SelectedIcon,\n                    ]\n                  : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={\n                    avatar\n                      ? white\n                      : !disabled && theme.isV3\n                      ? theme.colors.primary\n                      : iconColor\n                  }\n                  size={18}\n                  theme={theme}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              isV3 ? styles.md3LabelText : styles.labelText,\n              labelTextStyle,\n              labelSpacings,\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n            maxFontSizeMultiplier={maxFontSizeMultiplier}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <Pressable\n            onPress={onClose}\n            disabled={disabled}\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View\n              style={[\n                styles.icon,\n                styles.closeIcon,\n                isV3 && styles.md3CloseIcon,\n              ]}\n            >\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={iconSize} />\n              ) : (\n                <MaterialCommunityIcon\n                  name={isV3 ? 'close' : 'close-circle'}\n                  size={iconSize}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </Pressable>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  md3OutlineContainer: {\n    borderWidth: 1,\n  },\n  md3FlatContainer: {\n    borderWidth: 0,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n  },\n  md3Content: {\n    paddingLeft: 0,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0,\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0,\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0,\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    width: '100%',\n  },\n});\n\nexport default Chip;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}