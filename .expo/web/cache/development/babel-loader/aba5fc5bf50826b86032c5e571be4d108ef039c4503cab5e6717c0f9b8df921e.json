{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Drawer = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _reactNativeReanimated = _interopRequireDefault(require(\"react-native-reanimated\"));\nvar _constants = require(\"../../constants\");\nvar _DrawerProgressContext = require(\"../../utils/DrawerProgressContext\");\nvar _GestureHandler = require(\"../GestureHandler\");\nvar _Overlay = require(\"./Overlay\");\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nfunction _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar Clock = _reactNativeReanimated.default.Clock,\n  Value = _reactNativeReanimated.default.Value,\n  onChange = _reactNativeReanimated.default.onChange,\n  clockRunning = _reactNativeReanimated.default.clockRunning,\n  startClock = _reactNativeReanimated.default.startClock,\n  stopClock = _reactNativeReanimated.default.stopClock,\n  spring = _reactNativeReanimated.default.spring,\n  abs = _reactNativeReanimated.default.abs,\n  add = _reactNativeReanimated.default.add,\n  and = _reactNativeReanimated.default.and,\n  block = _reactNativeReanimated.default.block,\n  call = _reactNativeReanimated.default.call,\n  cond = _reactNativeReanimated.default.cond,\n  divide = _reactNativeReanimated.default.divide,\n  eq = _reactNativeReanimated.default.eq,\n  event = _reactNativeReanimated.default.event,\n  greaterThan = _reactNativeReanimated.default.greaterThan,\n  lessThan = _reactNativeReanimated.default.lessThan,\n  max = _reactNativeReanimated.default.max,\n  min = _reactNativeReanimated.default.min,\n  multiply = _reactNativeReanimated.default.multiply,\n  neq = _reactNativeReanimated.default.neq,\n  or = _reactNativeReanimated.default.or,\n  set = _reactNativeReanimated.default.set,\n  sub = _reactNativeReanimated.default.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar ANIMATED_ZERO = new _reactNativeReanimated.default.Value(0);\nvar ANIMATED_ONE = new _reactNativeReanimated.default.Value(1);\nvar Drawer = exports.Drawer = function (_React$Component) {\n  (0, _inherits2.default)(Drawer, _React$Component);\n  function Drawer() {\n    var _this$props$swipeMinD, _this$props$swipeMinV;\n    var _this;\n    (0, _classCallCheck2.default)(this, Drawer);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, Drawer, [].concat(args));\n    _this.handleEndInteraction = function () {\n      if (_this.interactionHandle !== undefined) {\n        _reactNative.InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    };\n    _this.handleStartInteraction = function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = _reactNative.InteractionManager.createInteractionHandle();\n      }\n    };\n    _this.getDrawerWidth = function () {\n      var _this$props6 = _this.props,\n        drawerStyle = _this$props6.drawerStyle,\n        layout = _this$props6.layout;\n      var _ref4 = _reactNative.StyleSheet.flatten(drawerStyle) || {},\n        _ref4$width = _ref4.width,\n        width = _ref4$width === void 0 ? _constants.DEFAULT_DRAWER_WIDTH : _ref4$width;\n      if (typeof width === 'string' && width.endsWith('%')) {\n        var percentage = Number(width.replace(/%$/, ''));\n        if (Number.isFinite(percentage)) {\n          return layout.width * (percentage / 100);\n        }\n      }\n      return typeof width === 'number' ? width : 0;\n    };\n    _this.clock = new Clock();\n    _this.isDrawerTypeFront = new Value(_this.props.drawerType === 'front' ? TRUE : FALSE);\n    _this.isOpen = new Value(_this.props.open ? TRUE : FALSE);\n    _this.nextIsOpen = new Value(UNSET);\n    _this.isSwiping = new Value(FALSE);\n    _this.initialDrawerWidth = _this.getDrawerWidth();\n    _this.gestureState = new Value(_GestureHandler.GestureState.UNDETERMINED);\n    _this.touchX = new Value(0);\n    _this.velocityX = new Value(0);\n    _this.gestureX = new Value(0);\n    _this.offsetX = new Value(0);\n    _this.position = new Value(_this.props.open ? _this.initialDrawerWidth * (_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0);\n    _this.containerWidth = new Value(_this.props.layout.width);\n    _this.drawerWidth = new Value(_this.initialDrawerWidth);\n    _this.drawerOpacity = new Value(_this.props.drawerType === 'permanent' ? 1 : 0);\n    _this.drawerPosition = new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n    _this.touchDistanceFromDrawer = cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0);\n    _this.swipeDistanceThreshold = new Value((_this$props$swipeMinD = _this.props.swipeMinDistance) != null ? _this$props$swipeMinD : _constants.SWIPE_MIN_DISTANCE);\n    _this.swipeVelocityThreshold = new Value((_this$props$swipeMinV = _this.props.swipeMinVelocity) != null ? _this$props$swipeMinV : _constants.SWIPE_MIN_VELOCITY);\n    _this.currentOpenValue = _this.props.open;\n    _this.isStatusBarHidden = false;\n    _this.manuallyTriggerSpring = new Value(FALSE);\n    _this.transitionTo = function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), call([], _this.handleStartInteraction), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, Object.assign({}, SPRING_CONFIG, {\n        toValue: toValue\n      })), onChange(state.finished, cond(state.finished, call([_this.isOpen], function (open) {\n        var _this$props$onTransit, _this$props;\n        return (_this$props$onTransit = (_this$props = _this.props).onTransitionEnd) === null || _this$props$onTransit === void 0 ? void 0 : _this$props$onTransit.call(_this$props, !open);\n      }), call([_this.isOpen], function (open) {\n        var _this$props$onTransit2, _this$props2;\n        return (_this$props$onTransit2 = (_this$props2 = _this.props).onTransitionStart) === null || _this$props$onTransit2 === void 0 ? void 0 : _this$props$onTransit2.call(_this$props2, !open);\n      }))), cond(state.finished, [set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0), stopClock(_this.clock), call([_this.isOpen], function (_ref) {\n        var _ref5 = (0, _slicedToArray2.default)(_ref, 1),\n          value = _ref5[0];\n        var open = Boolean(value);\n        _this.handleEndInteraction();\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    };\n    _this.dragX = block([onChange(_this.isOpen, call([_this.isOpen], function (_ref2) {\n      var _ref6 = (0, _slicedToArray2.default)(_ref2, 1),\n        value = _ref6[0];\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n        _this.pendingOpenValue = open;\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])), onChange(_this.isSwiping, call([_this.isSwiping], function (_ref3) {\n      var _ref7 = (0, _slicedToArray2.default)(_ref3, 1),\n        value = _ref7[0];\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          _reactNative.Keyboard.dismiss();\n        }\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), onChange(_this.gestureState, cond(eq(_this.gestureState, _GestureHandler.GestureState.ACTIVE), call([], _this.handleStartInteraction))), onChange(_this.gestureState, cond(eq(_this.gestureState, _GestureHandler.GestureState.END), [call([], function () {\n      var _this$props$onGesture, _this$props3;\n      return (_this$props$onGesture = (_this$props3 = _this.props).onGestureEnd) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props3);\n    })])), onChange(_this.gestureState, cond(eq(_this.gestureState, _GestureHandler.GestureState.CANCELLED), [call([], function () {\n      var _this$props$onGesture2, _this$props4;\n      return (_this$props$onGesture2 = (_this$props4 = _this.props).onGestureCancel) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props4);\n    })])), cond(eq(_this.gestureState, _GestureHandler.GestureState.ACTIVE), [cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.offsetX, _this.position), call([], function () {\n      var _this$props$onGesture3, _this$props5;\n      return (_this$props$onGesture3 = (_this$props5 = _this.props).onGestureStart) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props5);\n    })]), set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), _constants.SWIPE_MIN_OFFSET), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0), lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]);\n    _this.translateX = cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0));\n    _this.progress = cond(eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth)));\n    _this.handleGestureEvent = event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]);\n    _this.handleGestureStateChange = event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]);\n    _this.handleContainerLayout = function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    };\n    _this.handleDrawerLayout = function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n      _this.toggleDrawer(_this.props.open);\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.drawerOpacity.setValue(1);\n        });\n      });\n    };\n    _this.toggleDrawer = function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n        _this.currentOpenValue = open;\n      }\n    };\n    _this.toggleStatusBar = function (hidden) {\n      var _this$props7 = _this.props,\n        hideStatusBar = _this$props7.hideStatusBarOnOpen,\n        statusBarAnimation = _this$props7.statusBarAnimation;\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n        _reactNative.StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    };\n    return _this;\n  }\n  (0, _createClass2.default)(Drawer, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props8 = this.props,\n        open = _this$props8.open,\n        drawerPosition = _this$props8.drawerPosition,\n        drawerType = _this$props8.drawerType,\n        swipeMinDistance = _this$props8.swipeMinDistance,\n        swipeMinVelocity = _this$props8.swipeMinVelocity,\n        hideStatusBarOnOpen = _this$props8.hideStatusBarOnOpen;\n      if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n      this.pendingOpenValue = undefined;\n      if (open !== prevProps.open && hideStatusBarOnOpen) {\n        this.toggleStatusBar(open);\n      }\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n      if (prevProps.swipeMinDistance !== swipeMinDistance) {\n        this.swipeDistanceThreshold.setValue(swipeMinDistance != null ? swipeMinDistance : _constants.SWIPE_MIN_DISTANCE);\n      }\n      if (prevProps.swipeMinVelocity !== swipeMinVelocity) {\n        this.swipeVelocityThreshold.setValue(swipeMinVelocity != null ? swipeMinVelocity : _constants.SWIPE_MIN_VELOCITY);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props9 = this.props,\n        open = _this$props9.open,\n        swipeEnabled = _this$props9.swipeEnabled,\n        drawerPosition = _this$props9.drawerPosition,\n        drawerType = _this$props9.drawerType,\n        swipeEdgeWidth = _this$props9.swipeEdgeWidth,\n        drawerStyle = _this$props9.drawerStyle,\n        overlayStyle = _this$props9.overlayStyle,\n        renderDrawerContent = _this$props9.renderDrawerContent,\n        children = _this$props9.children,\n        gestureHandlerProps = _this$props9.gestureHandlerProps,\n        overlayAccessibilityLabel = _this$props9.overlayAccessibilityLabel;\n      var isOpen = drawerType === 'permanent' ? true : open;\n      var isRight = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n      var drawerTranslateX = drawerType === 'back' ? ANIMATED_ZERO : this.translateX;\n      var offset = drawerType === 'back' ? 0 : '100%';\n      var hitSlop = isRight ? {\n        right: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      };\n      var progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n      return React.createElement(_DrawerProgressContext.DrawerProgressContext.Provider, {\n        value: progress\n      }, React.createElement(_GestureHandler.PanGestureHandler, _extends({\n        activeOffsetX: [-_constants.SWIPE_MIN_OFFSET, _constants.SWIPE_MIN_OFFSET],\n        failOffsetY: [-_constants.SWIPE_MIN_OFFSET, _constants.SWIPE_MIN_OFFSET],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: drawerType !== 'permanent' && swipeEnabled\n      }, gestureHandlerProps), React.createElement(_reactNativeReanimated.default.View, {\n        onLayout: this.handleContainerLayout,\n        style: [styles.main, {\n          flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n        }]\n      }, React.createElement(_reactNativeReanimated.default.View, {\n        style: [styles.content, {\n          transform: drawerType === 'permanent' ? [] : [{\n            translateX: contentTranslateX\n          }]\n        }]\n      }, React.createElement(_reactNative.View, {\n        accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n        importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n        style: styles.content\n      }, children), drawerType === 'permanent' ? null : React.createElement(_Overlay.Overlay, {\n        progress: progress,\n        onPress: function onPress() {\n          return _this2.toggleDrawer(false);\n        },\n        accessibilityLabel: overlayAccessibilityLabel,\n        style: overlayStyle,\n        accessibilityElementsHidden: !isOpen,\n        importantForAccessibility: isOpen ? 'auto' : 'no-hide-descendants'\n      })), React.createElement(_reactNativeReanimated.default.Code, {\n        exec: this.containerWidth\n      }), drawerType === 'permanent' ? null : React.createElement(_reactNativeReanimated.default.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])])\n      }), React.createElement(_reactNativeReanimated.default.View, {\n        removeClippedSubviews: _reactNative.Platform.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, {\n          transform: drawerType === 'permanent' ? [] : [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity\n        }, drawerType === 'permanent' ? isRight ? {\n          right: 0\n        } : {\n          left: 0\n        } : [styles.nonPermanent, isRight ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          zIndex: drawerType === 'back' ? -1 : 0\n        }], drawerStyle]\n      }, renderDrawerContent()))));\n    }\n  }]);\n  return Drawer;\n}(React.Component);\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: _constants.DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: Object.assign({\n    flex: 1\n  }, _reactNative.Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_reactNativeReanimated","_interopRequireDefault","_constants","_DrawerProgressContext","_GestureHandler","_Overlay","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_callSuper","o","_getPrototypeOf2","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","valueOf","Clock","Animated","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","Drawer","exports","_React$Component","_inherits2","_this$props$swipeMinD","_this$props$swipeMinV","_this","_classCallCheck2","_len","arguments","length","args","Array","_key","concat","handleEndInteraction","interactionHandle","undefined","InteractionManager","clearInteractionHandle","handleStartInteraction","createInteractionHandle","getDrawerWidth","_this$props6","props","drawerStyle","layout","_ref4","StyleSheet","flatten","_ref4$width","width","DEFAULT_DRAWER_WIDTH","endsWith","percentage","Number","replace","isFinite","clock","isDrawerTypeFront","drawerType","isOpen","open","nextIsOpen","isSwiping","initialDrawerWidth","gestureState","GestureState","UNDETERMINED","touchX","velocityX","gestureX","offsetX","position","drawerPosition","containerWidth","drawerWidth","drawerOpacity","touchDistanceFromDrawer","swipeDistanceThreshold","swipeMinDistance","SWIPE_MIN_DISTANCE","swipeVelocityThreshold","swipeMinVelocity","SWIPE_MIN_VELOCITY","currentOpenValue","isStatusBarHidden","manuallyTriggerSpring","transitionTo","toValue","frameTime","state","time","finished","velocity","assign","_this$props$onTransit","_this$props","onTransitionEnd","_this$props$onTransit2","_this$props2","onTransitionStart","_ref","_ref5","_slicedToArray2","value","toggleDrawer","dragX","_ref2","_ref6","onOpen","onClose","pendingOpenValue","forceUpdate","_ref3","_ref7","keyboardDismissMode","Keyboard","dismiss","toggleStatusBar","ACTIVE","END","_this$props$onGesture","_this$props3","onGestureEnd","CANCELLED","_this$props$onGesture2","_this$props4","onGestureCancel","_this$props$onGesture3","_this$props5","onGestureStart","SWIPE_MIN_OFFSET","translateX","progress","handleGestureEvent","nativeEvent","x","translationX","handleGestureStateChange","s","handleContainerLayout","setValue","handleDrawerLayout","requestAnimationFrame","hidden","_this$props7","hideStatusBar","hideStatusBarOnOpen","statusBarAnimation","StatusBar","setHidden","_createClass2","key","componentDidUpdate","prevProps","_this$props8","componentWillUnmount","render","_this2","_this$props9","swipeEnabled","swipeEdgeWidth","overlayStyle","renderDrawerContent","children","gestureHandlerProps","overlayAccessibilityLabel","isRight","contentTranslateX","drawerTranslateX","offset","hitSlop","right","left","createElement","DrawerProgressContext","Provider","PanGestureHandler","_extends","activeOffsetX","failOffsetY","onGestureEvent","onHandlerStateChange","enabled","View","onLayout","style","styles","main","flexDirection","content","transform","accessibilityElementsHidden","importantForAccessibility","Overlay","onPress","accessibilityLabel","Code","exec","removeClippedSubviews","Platform","OS","container","opacity","nonPermanent","zIndex","Component","create","backgroundColor","maxWidth","top","bottom","flex","select","web","overflow"],"sources":["D:\\course\\ReactNative\\Tasks\\node_modules\\react-native-drawer-layout\\src\\views\\legacy\\Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  InteractionManager,\n  Keyboard,\n  LayoutChangeEvent,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nimport {\n  DEFAULT_DRAWER_WIDTH,\n  SWIPE_MIN_DISTANCE,\n  SWIPE_MIN_OFFSET,\n  SWIPE_MIN_VELOCITY,\n} from '../../constants';\nimport type { DrawerProps } from '../../types';\nimport { DrawerProgressContext } from '../../utils/DrawerProgressContext';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport { Overlay } from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\ntype Props = DrawerProps & {\n  layout: { width: number };\n};\n\nexport class Drawer extends React.Component<Props> {\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeMinDistance,\n      swipeMinVelocity,\n      hideStatusBarOnOpen,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBarOnOpen) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeMinDistance !== swipeMinDistance) {\n      this.swipeDistanceThreshold.setValue(\n        swipeMinDistance ?? SWIPE_MIN_DISTANCE\n      );\n    }\n\n    if (prevProps.swipeMinVelocity !== swipeMinVelocity) {\n      this.swipeVelocityThreshold.setValue(\n        swipeMinVelocity ?? SWIPE_MIN_VELOCITY\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, layout } = this.props;\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return layout.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.layout.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeMinDistance ?? SWIPE_MIN_DISTANCE\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeMinVelocity ?? SWIPE_MIN_VELOCITY\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      onChange(\n        state.finished,\n        cond(\n          state.finished,\n          call([this.isOpen], (open) => this.props.onTransitionEnd?.(!open)),\n          call([this.isOpen], (open) => this.props.onTransitionStart?.(!open))\n        )\n      ),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    onChange(\n      this.gestureState,\n      cond(eq(this.gestureState, GestureState.END), [\n        call([], () => this.props.onGestureEnd?.()),\n      ])\n    ),\n    onChange(\n      this.gestureState,\n      cond(eq(this.gestureState, GestureState.CANCELLED), [\n        call([], () => this.props.onGestureCancel?.()),\n      ])\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n          call([], () => this.props.onGestureStart?.()),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_MIN_OFFSET),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBarOnOpen: hideStatusBar, statusBarAnimation } =\n      this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      children,\n      gestureHandlerProps,\n      overlayAccessibilityLabel,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'back' ? ANIMATED_ZERO : this.translateX;\n\n    const offset = drawerType === 'back' ? 0 : '100%';\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <DrawerProgressContext.Provider value={progress}>\n        <PanGestureHandler\n          activeOffsetX={[-SWIPE_MIN_OFFSET, SWIPE_MIN_OFFSET]}\n          failOffsetY={[-SWIPE_MIN_OFFSET, SWIPE_MIN_OFFSET]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={drawerType !== 'permanent' && swipeEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={[\n              styles.main,\n              {\n                flexDirection:\n                  drawerType === 'permanent' && !isRight\n                    ? 'row-reverse'\n                    : 'row',\n              },\n            ]}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: contentTranslateX }],\n                },\n              ]}\n            >\n              <View\n                accessibilityElementsHidden={\n                  isOpen && drawerType !== 'permanent'\n                }\n                importantForAccessibility={\n                  isOpen && drawerType !== 'permanent'\n                    ? 'no-hide-descendants'\n                    : 'auto'\n                }\n                style={styles.content}\n              >\n                {children}\n              </View>\n              {\n                // Disable overlay if sidebar is permanent\n                drawerType === 'permanent' ? null : (\n                  <Overlay\n                    progress={progress}\n                    onPress={() => this.toggleDrawer(false)}\n                    accessibilityLabel={overlayAccessibilityLabel}\n                    style={overlayStyle as any}\n                    accessibilityElementsHidden={!isOpen}\n                    importantForAccessibility={\n                      isOpen ? 'auto' : 'no-hide-descendants'\n                    }\n                  />\n                )\n              }\n            </Animated.View>\n            <Animated.Code\n              // This is needed to make sure that container width updates with `setValue`\n              // Without this, it won't update when not used in styles\n              exec={this.containerWidth}\n            />\n            {drawerType === 'permanent' ? null : (\n              <Animated.Code\n                exec={block([\n                  onChange(this.manuallyTriggerSpring, [\n                    cond(eq(this.manuallyTriggerSpring, TRUE), [\n                      set(this.nextIsOpen, FALSE),\n                      call([], () => (this.currentOpenValue = false)),\n                    ]),\n                  ]),\n                ])}\n              />\n            )}\n            <Animated.View\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                },\n                drawerType === 'permanent'\n                  ? // Without this, the `left`/`right` values don't get reset\n                    isRight\n                    ? { right: 0 }\n                    : { left: 0 }\n                  : [\n                      styles.nonPermanent,\n                      isRight ? { right: offset } : { left: offset },\n                      { zIndex: drawerType === 'back' ? -1 : 0 },\n                    ],\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent()}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}