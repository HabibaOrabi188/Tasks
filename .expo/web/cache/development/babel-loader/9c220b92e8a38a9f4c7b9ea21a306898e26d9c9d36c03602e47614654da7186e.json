{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _interfaces = require(\"../interfaces\");\nvar _EventManager2 = _interopRequireDefault(require(\"./EventManager\"));\nvar _utils = require(\"../utils\");\nfunction _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar POINTER_CAPTURE_EXCLUDE_LIST = new Set(['SELECT', 'INPUT']);\nvar PointerEventManager = exports.default = function (_EventManager) {\n  (0, _inherits2.default)(PointerEventManager, _EventManager);\n  function PointerEventManager() {\n    var _this;\n    (0, _classCallCheck2.default)(this, PointerEventManager);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, PointerEventManager, [].concat(args));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"trackedPointers\", new Set());\n    return _this;\n  }\n  (0, _createClass2.default)(PointerEventManager, [{\n    key: \"setListeners\",\n    value: function setListeners() {\n      var _this2 = this;\n      this.view.addEventListener('pointerdown', function (event) {\n        if (event.pointerType === _interfaces.PointerType.TOUCH) {\n          return;\n        }\n        if (!(0, _utils.isPointerInBounds)(_this2.view, {\n          x: event.clientX,\n          y: event.clientY\n        })) {\n          return;\n        }\n        var adaptedEvent = _this2.mapEvent(event, _interfaces.EventTypes.DOWN);\n        var target = event.target;\n        if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n          target.setPointerCapture(adaptedEvent.pointerId);\n        }\n        _this2.markAsInBounds(adaptedEvent.pointerId);\n        _this2.trackedPointers.add(adaptedEvent.pointerId);\n        if (++_this2.activePointersCounter > 1) {\n          adaptedEvent.eventType = _interfaces.EventTypes.ADDITIONAL_POINTER_DOWN;\n          _this2.onPointerAdd(adaptedEvent);\n        } else {\n          _this2.onPointerDown(adaptedEvent);\n        }\n      });\n      this.view.addEventListener('pointerup', function (event) {\n        if (event.pointerType === _interfaces.PointerType.TOUCH) {\n          return;\n        }\n        if (_this2.activePointersCounter === 0) {\n          return;\n        }\n        var adaptedEvent = _this2.mapEvent(event, _interfaces.EventTypes.UP);\n        var target = event.target;\n        if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n          target.releasePointerCapture(adaptedEvent.pointerId);\n        }\n        _this2.markAsOutOfBounds(adaptedEvent.pointerId);\n        _this2.trackedPointers.delete(adaptedEvent.pointerId);\n        if (--_this2.activePointersCounter > 0) {\n          adaptedEvent.eventType = _interfaces.EventTypes.ADDITIONAL_POINTER_UP;\n          _this2.onPointerRemove(adaptedEvent);\n        } else {\n          _this2.onPointerUp(adaptedEvent);\n        }\n      });\n      this.view.addEventListener('pointermove', function (event) {\n        if (event.pointerType === _interfaces.PointerType.TOUCH) {\n          return;\n        }\n        var adaptedEvent = _this2.mapEvent(event, _interfaces.EventTypes.MOVE);\n        var target = event.target;\n        if (!target.hasPointerCapture(event.pointerId) && !POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n          target.setPointerCapture(event.pointerId);\n        }\n        var inBounds = (0, _utils.isPointerInBounds)(_this2.view, {\n          x: adaptedEvent.x,\n          y: adaptedEvent.y\n        });\n        var pointerIndex = _this2.pointersInBounds.indexOf(adaptedEvent.pointerId);\n        if (inBounds) {\n          if (pointerIndex < 0) {\n            adaptedEvent.eventType = _interfaces.EventTypes.ENTER;\n            _this2.onPointerEnter(adaptedEvent);\n            _this2.markAsInBounds(adaptedEvent.pointerId);\n          } else {\n            _this2.onPointerMove(adaptedEvent);\n          }\n        } else {\n          if (pointerIndex >= 0) {\n            adaptedEvent.eventType = _interfaces.EventTypes.LEAVE;\n            _this2.onPointerLeave(adaptedEvent);\n            _this2.markAsOutOfBounds(adaptedEvent.pointerId);\n          } else {\n            _this2.onPointerOutOfBounds(adaptedEvent);\n          }\n        }\n      });\n      this.view.addEventListener('pointercancel', function (event) {\n        if (event.pointerType === _interfaces.PointerType.TOUCH) {\n          return;\n        }\n        var adaptedEvent = _this2.mapEvent(event, _interfaces.EventTypes.CANCEL);\n        _this2.onPointerCancel(adaptedEvent);\n        _this2.markAsOutOfBounds(adaptedEvent.pointerId);\n        _this2.activePointersCounter = 0;\n        _this2.trackedPointers.clear();\n      });\n      this.view.addEventListener('pointerenter', function (event) {\n        if (event.pointerType === _interfaces.PointerType.TOUCH) {\n          return;\n        }\n        var adaptedEvent = _this2.mapEvent(event, _interfaces.EventTypes.ENTER);\n        _this2.onPointerMoveOver(adaptedEvent);\n      });\n      this.view.addEventListener('pointerleave', function (event) {\n        if (event.pointerType === _interfaces.PointerType.TOUCH) {\n          return;\n        }\n        var adaptedEvent = _this2.mapEvent(event, _interfaces.EventTypes.LEAVE);\n        _this2.onPointerMoveOut(adaptedEvent);\n      });\n      this.view.addEventListener('lostpointercapture', function (event) {\n        var adaptedEvent = _this2.mapEvent(event, _interfaces.EventTypes.CANCEL);\n        if (_this2.trackedPointers.has(adaptedEvent.pointerId)) {\n          _this2.onPointerCancel(adaptedEvent);\n          _this2.activePointersCounter = 0;\n          _this2.trackedPointers.clear();\n        }\n      });\n    }\n  }, {\n    key: \"mapEvent\",\n    value: function mapEvent(event, eventType) {\n      return {\n        x: event.clientX,\n        y: event.clientY,\n        offsetX: event.offsetX,\n        offsetY: event.offsetY,\n        pointerId: event.pointerId,\n        eventType: eventType,\n        pointerType: event.pointerType,\n        buttons: event.buttons,\n        time: event.timeStamp\n      };\n    }\n  }, {\n    key: \"resetManager\",\n    value: function resetManager() {\n      (0, _get2.default)((0, _getPrototypeOf2.default)(PointerEventManager.prototype), \"resetManager\", this).call(this);\n      this.trackedPointers.clear();\n    }\n  }]);\n  return PointerEventManager;\n}(_EventManager2.default);","map":{"version":3,"names":["_interfaces","require","_EventManager2","_interopRequireDefault","_utils","_callSuper","t","o","e","_getPrototypeOf2","default","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","POINTER_CAPTURE_EXCLUDE_LIST","Set","PointerEventManager","exports","_EventManager","_inherits2","_this","_classCallCheck2","_len","arguments","length","args","Array","_key","concat","_defineProperty","_assertThisInitialized2","_createClass2","key","value","setListeners","_this2","view","addEventListener","event","pointerType","PointerType","TOUCH","isPointerInBounds","x","clientX","y","clientY","adaptedEvent","mapEvent","EventTypes","DOWN","target","has","tagName","setPointerCapture","pointerId","markAsInBounds","trackedPointers","add","activePointersCounter","eventType","ADDITIONAL_POINTER_DOWN","onPointerAdd","onPointerDown","UP","releasePointerCapture","markAsOutOfBounds","delete","ADDITIONAL_POINTER_UP","onPointerRemove","onPointerUp","MOVE","hasPointerCapture","inBounds","pointerIndex","pointersInBounds","indexOf","ENTER","onPointerEnter","onPointerMove","LEAVE","onPointerLeave","onPointerOutOfBounds","CANCEL","onPointerCancel","clear","onPointerMoveOver","onPointerMoveOut","offsetX","offsetY","buttons","time","timeStamp","resetManager","_get2","EventManager"],"sources":["D:\\course\\ReactNative\\Tasks\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\PointerEventManager.ts"],"sourcesContent":["import { AdaptedEvent, EventTypes, PointerType } from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\n\nconst POINTER_CAPTURE_EXCLUDE_LIST = new Set<string>(['SELECT', 'INPUT']);\n\nexport default class PointerEventManager extends EventManager<HTMLElement> {\n  private trackedPointers = new Set<number>();\n\n  public setListeners(): void {\n    this.view.addEventListener('pointerdown', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      if (\n        !isPointerInBounds(this.view, { x: event.clientX, y: event.clientY })\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n      const target = event.target as HTMLElement;\n\n      if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.setPointerCapture(adaptedEvent.pointerId);\n      }\n\n      this.markAsInBounds(adaptedEvent.pointerId);\n      this.trackedPointers.add(adaptedEvent.pointerId);\n\n      if (++this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        this.onPointerAdd(adaptedEvent);\n      } else {\n        this.onPointerDown(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointerup', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      // When we call reset on gesture handlers, it also resets their event managers\n      // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n      // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n      // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n      if (this.activePointersCounter === 0) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.UP);\n      const target = event.target as HTMLElement;\n\n      if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.releasePointerCapture(adaptedEvent.pointerId);\n      }\n\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.trackedPointers.delete(adaptedEvent.pointerId);\n\n      if (--this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        this.onPointerRemove(adaptedEvent);\n      } else {\n        this.onPointerUp(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointermove', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n      const target = event.target as HTMLElement;\n\n      // You may be wondering why are we setting pointer capture here, when we\n      // already set it in `pointerdown` handler. Well, that's a great question,\n      // for which I don't have an answer. Specification (https://www.w3.org/TR/pointerevents2/#dom-element-setpointercapture)\n      // says that the requirement for `setPointerCapture` to work is that pointer\n      // must be in 'active buttons state`, otherwise it will fail silently, which\n      // is lovely. Obviously, when `pointerdown` is fired, one of the buttons\n      // (when using mouse) is pressed, but that doesn't mean that `setPointerCapture`\n      // will succeed, for some reason. Since it fails silently, we don't actually know\n      // if it worked or not (there's `gotpointercapture` event, but the complexity of\n      // incorporating it here seems stupid), so we just call it again here, every time\n      // pointer moves until it succeeds.\n      // God, I do love web development.\n      if (\n        !target.hasPointerCapture(event.pointerId) &&\n        !POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)\n      ) {\n        target.setPointerCapture(event.pointerId);\n      }\n\n      const inBounds: boolean = isPointerInBounds(this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y,\n      });\n\n      const pointerIndex: number = this.pointersInBounds.indexOf(\n        adaptedEvent.pointerId\n      );\n\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.LEAVE;\n          this.onPointerLeave(adaptedEvent);\n          this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('pointercancel', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(\n        event,\n        EventTypes.CANCEL\n      );\n\n      this.onPointerCancel(adaptedEvent);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.activePointersCounter = 0;\n      this.trackedPointers.clear();\n    });\n\n    // onPointerEnter and onPointerLeave are triggered by a custom logic responsible for\n    // handling shouldCancelWhenOutside flag, and are unreliable unless the pointer is down.\n    // We therefore use pointerenter and pointerleave events to handle the hover gesture,\n    // mapping them to onPointerMoveOver and onPointerMoveOut respectively.\n\n    this.view.addEventListener('pointerenter', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.ENTER);\n\n      this.onPointerMoveOver(adaptedEvent);\n    });\n\n    this.view.addEventListener('pointerleave', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.LEAVE);\n\n      this.onPointerMoveOut(adaptedEvent);\n    });\n\n    this.view.addEventListener(\n      'lostpointercapture',\n      (event: PointerEvent): void => {\n        const adaptedEvent: AdaptedEvent = this.mapEvent(\n          event,\n          EventTypes.CANCEL\n        );\n\n        if (this.trackedPointers.has(adaptedEvent.pointerId)) {\n          // in some cases the `pointerup` event is not fired, but `lostpointercapture` is\n          // we simulate the `pointercancel` event here to make sure the gesture handler stops tracking it\n          this.onPointerCancel(adaptedEvent);\n\n          this.activePointersCounter = 0;\n          this.trackedPointers.clear();\n        }\n      }\n    );\n  }\n\n  protected mapEvent(event: PointerEvent, eventType: EventTypes): AdaptedEvent {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: event.pointerType as PointerType,\n      buttons: event.buttons,\n      time: event.timeStamp,\n    };\n  }\n\n  public resetManager(): void {\n    super.resetManager();\n    this.trackedPointers.clear();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}