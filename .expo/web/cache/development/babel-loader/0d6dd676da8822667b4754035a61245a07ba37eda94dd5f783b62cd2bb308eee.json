{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.AppbarContent = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _utils = require(\"./utils\");\nvar _theming = require(\"../../core/theming\");\nvar _colors = require(\"../../styles/themes/v2/colors\");\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\nvar _excluded = [\"color\", \"subtitle\", \"subtitleStyle\", \"onPress\", \"disabled\", \"style\", \"titleRef\", \"titleStyle\", \"title\", \"titleMaxFontSizeMultiplier\", \"mode\", \"theme\", \"testID\"];\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar AppbarContent = exports.AppbarContent = function AppbarContent(_ref) {\n  var titleColor = _ref.color,\n    subtitle = _ref.subtitle,\n    subtitleStyle = _ref.subtitleStyle,\n    onPress = _ref.onPress,\n    disabled = _ref.disabled,\n    style = _ref.style,\n    titleRef = _ref.titleRef,\n    titleStyle = _ref.titleStyle,\n    title = _ref.title,\n    titleMaxFontSizeMultiplier = _ref.titleMaxFontSizeMultiplier,\n    _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'small' : _ref$mode,\n    themeOverrides = _ref.theme,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'appbar-content' : _ref$testID,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var theme = (0, _theming.useInternalTheme)(themeOverrides);\n  var isV3 = theme.isV3,\n    colors = theme.colors;\n  var titleTextColor = titleColor ? titleColor : isV3 ? colors.onSurface : _colors.white;\n  var subtitleColor = (0, _color.default)(titleTextColor).alpha(0.7).rgb().string();\n  var modeContainerStyles = {\n    small: styles.v3DefaultContainer,\n    medium: styles.v3MediumContainer,\n    large: styles.v3LargeContainer,\n    'center-aligned': styles.v3DefaultContainer\n  };\n  var variant = _utils.modeTextVariant[mode];\n  var contentWrapperProps = Object.assign({\n    pointerEvents: 'box-none',\n    style: [styles.container, isV3 && modeContainerStyles[mode], style],\n    testID: testID\n  }, rest);\n  var content = React.createElement(React.Fragment, null, typeof title === 'string' ? React.createElement(_Text.default, _extends({}, isV3 && {\n    variant: variant\n  }, {\n    ref: titleRef,\n    style: [Object.assign({\n      color: titleTextColor\n    }, isV3 ? theme.fonts[variant] : _reactNative.Platform.OS === 'ios' ? theme.fonts.regular : theme.fonts.medium), !isV3 && styles.title, titleStyle],\n    numberOfLines: 1,\n    accessible: true,\n    accessibilityRole: onPress ? 'none' : _reactNative.Platform.OS === 'web' ? 'heading' : 'header',\n    accessibilityTraits: \"header\",\n    testID: `${testID}-title-text`,\n    maxFontSizeMultiplier: titleMaxFontSizeMultiplier\n  }), title) : title, !isV3 && subtitle ? React.createElement(_Text.default, {\n    style: [styles.subtitle, {\n      color: subtitleColor\n    }, subtitleStyle],\n    numberOfLines: 1\n  }, subtitle) : null);\n  if (onPress) {\n    return React.createElement(_reactNative.Pressable, _extends({\n      accessibilityRole: touchableRole,\n      accessibilityTraits: touchableRole,\n      accessibilityComponentType: \"button\",\n      onPress: onPress,\n      disabled: disabled\n    }, contentWrapperProps), content);\n  }\n  return React.createElement(_reactNative.View, contentWrapperProps, content);\n};\nAppbarContent.displayName = 'Appbar.Content';\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12\n  },\n  v3DefaultContainer: {\n    paddingHorizontal: 0\n  },\n  v3MediumContainer: {\n    paddingHorizontal: 0,\n    justifyContent: 'flex-end',\n    paddingBottom: 24\n  },\n  v3LargeContainer: {\n    paddingHorizontal: 0,\n    paddingTop: 36,\n    justifyContent: 'flex-end',\n    paddingBottom: 28\n  },\n  title: {\n    fontSize: _reactNative.Platform.OS === 'ios' ? 17 : 20\n  },\n  subtitle: {\n    fontSize: _reactNative.Platform.OS === 'ios' ? 11 : 14\n  }\n});\nvar iosTouchableRole = ['button', 'header'];\nvar touchableRole = _reactNative.Platform.select({\n  ios: iosTouchableRole,\n  default: iosTouchableRole[0]\n});\nvar _default = exports.default = AppbarContent;","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_color","_interopRequireDefault","_utils","_theming","_colors","_Text","_excluded","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","AppbarContent","exports","_ref","titleColor","color","subtitle","subtitleStyle","onPress","disabled","style","titleRef","titleStyle","title","titleMaxFontSizeMultiplier","_ref$mode","mode","themeOverrides","theme","_ref$testID","testID","rest","_objectWithoutProperties2","useInternalTheme","isV3","colors","titleTextColor","onSurface","white","subtitleColor","alpha","rgb","string","modeContainerStyles","small","styles","v3DefaultContainer","medium","v3MediumContainer","large","v3LargeContainer","variant","modeTextVariant","contentWrapperProps","assign","pointerEvents","container","content","createElement","Fragment","Text","_extends","ref","fonts","Platform","OS","regular","numberOfLines","accessible","accessibilityRole","accessibilityTraits","maxFontSizeMultiplier","Pressable","touchableRole","accessibilityComponentType","View","displayName","StyleSheet","create","flex","paddingHorizontal","justifyContent","paddingBottom","paddingTop","fontSize","iosTouchableRole","select","ios","_default"],"sources":["D:\\course\\ReactNative\\Tasks\\node_modules\\react-native-paper\\src\\components\\Appbar\\AppbarContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityRole,\n  GestureResponderEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  Pressable,\n  View,\n  ViewStyle,\n  ViewProps,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { modeTextVariant } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { $RemoveChildren, MD3TypescaleKey, ThemeProp } from '../../types';\nimport Text, { TextRef } from '../Typography/Text';\n\ntype TitleString = {\n  title: string;\n  titleStyle?: StyleProp<TextStyle>;\n};\n\ntype TitleElement = { title: React.ReactNode; titleStyle?: never };\n\nexport type Props = $RemoveChildren<typeof View> & {\n  // For `title` and `titleStyle` props their types are duplicated due to the generation of documentation.\n  // Appropriate type for them are either `TitleString` or `TitleElement`, depends on `title` type.\n  /**\n   * Text or component for the title.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title, if `title` is a string.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Reference for the title.\n   */\n  titleRef?: React.RefObject<TextRef>;\n  /**\n   * @deprecated Deprecated in v5.x\n   * Text for the subtitle.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * @deprecated Deprecated in v5.x\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * If true, disable all interactions for this component.\n   */\n  disabled?: boolean;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Specifies the largest possible scale a title font can reach.\n   */\n  titleMaxFontSizeMultiplier?: number;\n  /**\n   * @internal\n   */\n  mode?: 'small' | 'medium' | 'large' | 'center-aligned';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n} & (TitleString | TitleElement);\n\n/**\n * A component used to display a title and optional subtitle in an appbar.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarContent = ({\n  color: titleColor,\n  subtitle,\n  subtitleStyle,\n  onPress,\n  disabled,\n  style,\n  titleRef,\n  titleStyle,\n  title,\n  titleMaxFontSizeMultiplier,\n  mode = 'small',\n  theme: themeOverrides,\n  testID = 'appbar-content',\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { isV3, colors } = theme;\n\n  const titleTextColor = titleColor\n    ? titleColor\n    : isV3\n    ? colors.onSurface\n    : white;\n\n  const subtitleColor = color(titleTextColor).alpha(0.7).rgb().string();\n\n  const modeContainerStyles = {\n    small: styles.v3DefaultContainer,\n    medium: styles.v3MediumContainer,\n    large: styles.v3LargeContainer,\n    'center-aligned': styles.v3DefaultContainer,\n  };\n\n  const variant = modeTextVariant[mode] as MD3TypescaleKey;\n\n  const contentWrapperProps = {\n    pointerEvents: 'box-none' as ViewProps['pointerEvents'],\n    style: [styles.container, isV3 && modeContainerStyles[mode], style],\n    testID,\n    ...rest,\n  };\n\n  const content = (\n    <>\n      {typeof title === 'string' ? (\n        <Text\n          {...(isV3 && { variant })}\n          ref={titleRef}\n          style={[\n            {\n              color: titleTextColor,\n              ...(isV3\n                ? theme.fonts[variant]\n                : Platform.OS === 'ios'\n                ? theme.fonts.regular\n                : theme.fonts.medium),\n            },\n            !isV3 && styles.title,\n            titleStyle,\n          ]}\n          numberOfLines={1}\n          accessible\n          accessibilityRole={\n            onPress\n              ? 'none'\n              : Platform.OS === 'web'\n              ? ('heading' as 'header')\n              : 'header'\n          }\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"header\"\n          testID={`${testID}-title-text`}\n          maxFontSizeMultiplier={titleMaxFontSizeMultiplier}\n        >\n          {title}\n        </Text>\n      ) : (\n        title\n      )}\n      {!isV3 && subtitle ? (\n        <Text\n          style={[styles.subtitle, { color: subtitleColor }, subtitleStyle]}\n          numberOfLines={1}\n        >\n          {subtitle}\n        </Text>\n      ) : null}\n    </>\n  );\n\n  if (onPress) {\n    return (\n      // eslint-disable-next-line react-native-a11y/has-accessibility-props\n      <Pressable\n        accessibilityRole={touchableRole}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={touchableRole}\n        accessibilityComponentType=\"button\"\n        onPress={onPress}\n        disabled={disabled}\n        {...contentWrapperProps}\n      >\n        {content}\n      </Pressable>\n    );\n  }\n\n  return <View {...contentWrapperProps}>{content}</View>;\n};\n\nAppbarContent.displayName = 'Appbar.Content';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12,\n  },\n  v3DefaultContainer: {\n    paddingHorizontal: 0,\n  },\n  v3MediumContainer: {\n    paddingHorizontal: 0,\n    justifyContent: 'flex-end',\n    paddingBottom: 24,\n  },\n  v3LargeContainer: {\n    paddingHorizontal: 0,\n    paddingTop: 36,\n    justifyContent: 'flex-end',\n    paddingBottom: 28,\n  },\n  title: {\n    fontSize: Platform.OS === 'ios' ? 17 : 20,\n  },\n  subtitle: {\n    fontSize: Platform.OS === 'ios' ? 11 : 14,\n  },\n});\n\nconst iosTouchableRole: readonly AccessibilityRole[] = ['button', 'header'];\nconst touchableRole: AccessibilityRole = Platform.select({\n  ios: iosTouchableRole as unknown as 'button',\n  default: iosTouchableRole[0],\n});\n\nexport default AppbarContent;\n\n// @component-docs ignore-next-line\nexport { AppbarContent };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}