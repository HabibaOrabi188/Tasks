{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransitionGenerator = TransitionGenerator;\nexports.createAnimationWithExistingTransform = createAnimationWithExistingTransform;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _config = require(\"./config\");\nvar _animationParser = require(\"./animationParser\");\nvar _Linear = require(\"./transition/Linear.web\");\nvar _Sequenced = require(\"./transition/Sequenced.web\");\nvar _Fading = require(\"./transition/Fading.web\");\nvar _domUtils = require(\"./domUtils\");\nfunction addPxToTranslate(existingTransform) {\n  var newTransform = existingTransform.map(function (transformProp) {\n    var newTransformProp = {};\n    for (var _ref of Object.entries(transformProp)) {\n      var _ref2 = (0, _slicedToArray2.default)(_ref, 2);\n      var key = _ref2[0];\n      var value = _ref2[1];\n      if (key.includes('translate')) {\n        newTransformProp[key] = `${value}px`;\n      } else {\n        newTransformProp[key] = value;\n      }\n    }\n    return newTransformProp;\n  });\n  return newTransform;\n}\nfunction addExistingTransform(newAnimationData, newTransform) {\n  for (var keyframeStepProperties of Object.values(newAnimationData.style)) {\n    if (!keyframeStepProperties.transform) {\n      keyframeStepProperties.transform = newTransform;\n    } else {\n      Array.prototype.unshift.apply(keyframeStepProperties.transform, newTransform);\n    }\n  }\n}\nfunction createAnimationWithExistingTransform(animationName, existingTransform, layoutTransition) {\n  var newAnimationData;\n  if (layoutTransition) {\n    newAnimationData = layoutTransition;\n  } else {\n    if (!(animationName in _config.Animations)) {\n      return '';\n    }\n    newAnimationData = structuredClone(_config.AnimationsData[animationName]);\n  }\n  var keyframeName = generateNextCustomKeyframeName();\n  newAnimationData.name = keyframeName;\n  var newTransform = addPxToTranslate(existingTransform);\n  addExistingTransform(newAnimationData, newTransform);\n  var keyframe = (0, _animationParser.convertAnimationObjectToKeyframes)(newAnimationData);\n  (0, _domUtils.insertWebAnimation)(keyframeName, keyframe);\n  return keyframeName;\n}\nvar customKeyframeCounter = 0;\nfunction generateNextCustomKeyframeName() {\n  return `REA${customKeyframeCounter++}`;\n}\nfunction TransitionGenerator(transitionType, transitionData, existingTransform) {\n  var transitionKeyframeName = generateNextCustomKeyframeName();\n  var transitionObject;\n  switch (transitionType) {\n    case _config.TransitionType.LINEAR:\n      transitionObject = (0, _Linear.LinearTransition)(transitionKeyframeName, transitionData);\n      break;\n    case _config.TransitionType.SEQUENCED:\n      transitionObject = (0, _Sequenced.SequencedTransition)(transitionKeyframeName, transitionData);\n      break;\n    case _config.TransitionType.FADING:\n      transitionObject = (0, _Fading.FadingTransition)(transitionKeyframeName, transitionData);\n      break;\n  }\n  if (existingTransform) {\n    return createAnimationWithExistingTransform('', existingTransform, transitionObject);\n  }\n  var transitionKeyframe = (0, _animationParser.convertAnimationObjectToKeyframes)(transitionObject);\n  (0, _domUtils.insertWebAnimation)(transitionKeyframeName, transitionKeyframe);\n  return transitionKeyframeName;\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","TransitionGenerator","createAnimationWithExistingTransform","_slicedToArray2","_config","_animationParser","_Linear","_Sequenced","_Fading","_domUtils","addPxToTranslate","existingTransform","newTransform","map","transformProp","newTransformProp","_ref","entries","_ref2","default","key","includes","addExistingTransform","newAnimationData","keyframeStepProperties","values","style","transform","Array","prototype","unshift","apply","animationName","layoutTransition","Animations","structuredClone","AnimationsData","keyframeName","generateNextCustomKeyframeName","name","keyframe","convertAnimationObjectToKeyframes","insertWebAnimation","customKeyframeCounter","transitionType","transitionData","transitionKeyframeName","transitionObject","TransitionType","LINEAR","LinearTransition","SEQUENCED","SequencedTransition","FADING","FadingTransition","transitionKeyframe"],"sources":["D:\\course\\ReactNative\\Tasks\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\layoutReanimation\\web\\createAnimation.ts"],"sourcesContent":["'use strict';\n\nimport { Animations, AnimationsData, TransitionType } from './config';\nimport { convertAnimationObjectToKeyframes } from './animationParser';\nimport type {\n  AnimationData,\n  ReanimatedWebTransformProperties,\n  TransitionData,\n} from './animationParser';\nimport type { TransformsStyle } from 'react-native';\nimport { LinearTransition } from './transition/Linear.web';\nimport { SequencedTransition } from './transition/Sequenced.web';\nimport { FadingTransition } from './transition/Fading.web';\nimport { insertWebAnimation } from './domUtils';\n\n// Translate values are passed as numbers. However, if `translate` property receives number, it will not automatically\n// convert it to `px`. Therefore if we want to keep exisitng transform we have to add 'px' suffix to each of translate values\n// that are present inside transform.\nfunction addPxToTranslate(\n  existingTransform: NonNullable<TransformsStyle['transform']>\n) {\n  type RNTransformProp = (typeof existingTransform)[number];\n\n  // @ts-ignore `existingTransform` cannot be string because in that case\n  // we throw error in `extractTransformFromStyle`\n  const newTransform = existingTransform.map(\n    (transformProp: RNTransformProp) => {\n      const newTransformProp: ReanimatedWebTransformProperties = {};\n      for (const [key, value] of Object.entries(transformProp)) {\n        if (key.includes('translate')) {\n          // @ts-ignore After many trials we decided to ignore this error - it says that we cannot use 'key' to index this object.\n          // Sadly it doesn't go away after using cast `key as keyof TransformProperties`.\n          newTransformProp[key] = `${value}px`;\n        } else {\n          // @ts-ignore same as above.\n          newTransformProp[key] = value;\n        }\n      }\n      return newTransformProp;\n    }\n  );\n\n  return newTransform;\n}\n\n// In order to keep exisitng transform throughout animation, we have to add it to each of keyframe step.\nfunction addExistingTransform(\n  newAnimationData: AnimationData,\n  newTransform: ReanimatedWebTransformProperties[]\n) {\n  for (const keyframeStepProperties of Object.values(newAnimationData.style)) {\n    if (!keyframeStepProperties.transform) {\n      // If transform doesn't exist, we add only transform that already exists\n      keyframeStepProperties.transform = newTransform;\n    } else {\n      // We insert existing transformations before ours.\n      Array.prototype.unshift.apply(\n        keyframeStepProperties.transform,\n        newTransform\n      );\n    }\n  }\n}\n\n/**\n *  Modifies default animation by preserving transformations that given element already contains.\n *\n * @param animationName - Name of the animation to be modified (e.g. `FadeIn`).\n * @param existingTransform - Transform values that element already contains.\n * @returns Animation parsed to keyframe string.\n */\nexport function createAnimationWithExistingTransform(\n  animationName: string,\n  existingTransform: NonNullable<TransformsStyle['transform']>,\n  layoutTransition?: AnimationData\n) {\n  let newAnimationData;\n\n  if (layoutTransition) {\n    newAnimationData = layoutTransition;\n  } else {\n    if (!(animationName in Animations)) {\n      return '';\n    }\n    newAnimationData = structuredClone(AnimationsData[animationName]);\n  }\n\n  const keyframeName = generateNextCustomKeyframeName();\n\n  newAnimationData.name = keyframeName;\n\n  const newTransform = addPxToTranslate(existingTransform);\n\n  addExistingTransform(newAnimationData, newTransform);\n\n  const keyframe = convertAnimationObjectToKeyframes(newAnimationData);\n\n  insertWebAnimation(keyframeName, keyframe);\n\n  return keyframeName;\n}\n\nlet customKeyframeCounter = 0;\n\nfunction generateNextCustomKeyframeName() {\n  return `REA${customKeyframeCounter++}`;\n}\n\n/**\n * Creates transition of given type, appends it to stylesheet and returns keyframe name.\n *\n * @param transitionType - Type of transition (e.g. LINEAR).\n * @param transitionData - Object containing data for transforms (translateX, scaleX,...).\n * @returns Keyframe name that represents transition.\n */\nexport function TransitionGenerator(\n  transitionType: TransitionType,\n  transitionData: TransitionData,\n  existingTransform: TransformsStyle['transform'] | undefined\n) {\n  const transitionKeyframeName = generateNextCustomKeyframeName();\n  let transitionObject;\n\n  switch (transitionType) {\n    case TransitionType.LINEAR:\n      transitionObject = LinearTransition(\n        transitionKeyframeName,\n        transitionData\n      );\n      break;\n    case TransitionType.SEQUENCED:\n      transitionObject = SequencedTransition(\n        transitionKeyframeName,\n        transitionData\n      );\n      break;\n    case TransitionType.FADING:\n      transitionObject = FadingTransition(\n        transitionKeyframeName,\n        transitionData\n      );\n      break;\n  }\n\n  if (existingTransform) {\n    return createAnimationWithExistingTransform(\n      '',\n      existingTransform,\n      transitionObject\n    );\n  }\n\n  const transitionKeyframe =\n    convertAnimationObjectToKeyframes(transitionObject);\n\n  insertWebAnimation(transitionKeyframeName, transitionKeyframe);\n\n  return transitionKeyframeName;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}